// Email Service Configuration for Nhi√™n Vi·ªát Inspired
class EmailService {
    constructor() {
        // EmailJS Configuration
        this.serviceID = 'YOUR_SERVICE_ID'; // You'll need to replace this
        this.templateID = 'YOUR_TEMPLATE_ID'; // You'll need to replace this  
        this.publicKey = 'YOUR_PUBLIC_KEY'; // You'll need to replace this
        
        this.init();
    }

    init() {
        // Initialize EmailJS with your public key
        if (typeof emailjs !== 'undefined') {
            emailjs.init(this.publicKey);
            console.log('EmailJS initialized successfully');
        } else {
            console.error('EmailJS library not loaded');
        }
    }

    async sendContactEmail(formData) {
        try {
            // Prepare template parameters
            const templateParams = {
                from_name: formData.name,
                from_email: formData.email,
                phone: formData.phone || 'Kh√¥ng cung c·∫•p',
                service: this.getServiceName(formData.service),
                message: formData.message,
                to_email: 'dulichnhienviet@gmail.com', // Your Gmail address
                reply_to: formData.email,
                date: new Date().toLocaleString('vi-VN'),
                subject: `Li√™n h·ªá m·ªõi t·ª´ ${formData.name} - ${this.getServiceName(formData.service)}`
            };

            console.log('Sending email with params:', templateParams);

            // Send email via EmailJS
            const response = await emailjs.send(
                this.serviceID,
                this.templateID,
                templateParams
            );

            console.log('Email sent successfully:', response);
            return {
                success: true,
                message: 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!',
                response: response
            };

        } catch (error) {
            console.error('Email sending failed:', error);
            return {
                success: false,
                message: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.',
                error: error
            };
        }
    }

    getServiceName(serviceCode) {
        const services = {
            'food': 'D·ªãch v·ª• ƒÉn u·ªëng',
            'tour': 'Tour du l·ªãch',
            'flight': 'V√© m√°y bay',
            'visa': 'Visa & Passport',
            '': 'Kh√¥ng ch·ªçn d·ªãch v·ª• c·ª• th·ªÉ'
        };
        return services[serviceCode] || 'D·ªãch v·ª• kh√°c';
    }

    // Validate EmailJS configuration
    isConfigured() {
        return this.serviceID !== 'YOUR_SERVICE_ID' && 
               this.templateID !== 'YOUR_TEMPLATE_ID' && 
               this.publicKey !== 'YOUR_PUBLIC_KEY';
    }

    // Show configuration instructions
    showConfigInstructions() {
        const instructions = `
üìß H∆Ø·ªöNG D·∫™N C·∫§U H√åNH EMAILJS:

1. Truy c·∫≠p https://www.emailjs.com/
2. ƒêƒÉng k√Ω t√†i kho·∫£n mi·ªÖn ph√≠
3. T·∫°o Service (Gmail):
   - Ch·ªçn Gmail
   - K·∫øt n·ªëi v·ªõi Gmail account c·ªßa b·∫°n
   - Copy Service ID

4. T·∫°o Email Template:
   - T·∫°o template m·ªõi
   - S·ª≠ d·ª•ng c√°c bi·∫øn: {{from_name}}, {{from_email}}, {{phone}}, {{service}}, {{message}}, {{date}}
   - Copy Template ID

5. L·∫•y Public Key:
   - V√†o Account Settings
   - Copy Public Key

6. C·∫≠p nh·∫≠t file assets/js/email-service.js:
   - serviceID: 'your_service_id'
   - templateID: 'your_template_id'  
   - publicKey: 'your_public_key'

üí° EmailJS cho ph√©p g·ª≠i 200 email/th√°ng mi·ªÖn ph√≠!
        `;
        
        console.log(instructions);
        return instructions;
    }
}

// Export for use in main.js
window.EmailService = EmailService;